// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  products Product[] // Products created by the admin
  posts    Post[] // Posts created by the admin
  comments Comment[] // Comments made by the admin
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String // Name of the customer
  email       String?   @unique // Optional email for the customer
  phoneNumber String? // Optional phone number
  orders      Order[] // Orders made by the customer
  Payment     Payment[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique // Name of the tag
  products Product[] @relation("ProductTags") // Relation with products
}

model Product {
  id          Int                @id @default(autoincrement())
  name        String
  description String             @db.Text
  price       Float
  slug        String             @unique
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  categoryId  Int
  category    Category           @relation(fields: [categoryId], references: [id])
  comments    Comment[] // Comments related to the product
  images      Image[] // Images related to the product
  orderItems  OrderItem[] // Order items related to the product
  attributes  ProductAttribute[] // Attributes of the product
  tags        Tag[]              @relation("ProductTags") // Relation with tags
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum DisplayType {
  SINGLE_LINE // Display type on a single line
  LIST // Display type as a list
}

model ProductAttribute {
  id             Int         @id @default(autoincrement())
  productId      Int
  attributeName  String
  attributeValue String      @db.Text
  sortOrder      Int? // Optional sort order
  displayType    DisplayType @default(SINGLE_LINE)
  product        Product     @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  products    Product[] // Products in this category
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  content     String    @db.Text
  thumbnail   String
  slug        String    @unique
  type        String
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[] // Comments for the post
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  name      String // Name of the commenter
  productId Int? // Comment may relate to a product
  product   Product? @relation(fields: [productId], references: [id])
  postId    Int? // Comment may relate to a post
  post      Post?    @relation(fields: [postId], references: [id])
  rating    Int? // Optional rating
  createdAt DateTime @default(now())
  userId    Int? // Optional user ID for admin comments
  User      User?    @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model Address {
  id          Int     @id @default(autoincrement())
  recipient   String // Name of the person receiving the order
  phoneNumber String // Phone number of the recipient
  street      String // Street address
  ward        String // Ward
  district    String // District
  province    String // Province/City
  orders      Order[] // Link to multiple Orders
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int? // Optional link to Customer
  customer   Customer?   @relation(fields: [customerId], references: [id])
  orderItems OrderItem[] // Relationship to OrderItem
  totalPrice Float
  status     OrderStatus @default(PENDING) // Order status
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  payments   Payment[] // Relationship to Payment
  addressId  Int? // Optional link to Address
  address    Address?    @relation(fields: [addressId], references: [id]) // Corrected relation
  note       String? // Optional field for additional notes
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  price     Float // Price at the time of purchase
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id         Int           @id @default(autoincrement())
  orderId    Int
  order      Order         @relation(fields: [orderId], references: [id])
  amount     Float
  method     PaymentMethod // Using Enum for payment method
  status     PaymentStatus @default(PENDING) // Using Enum for payment status
  createdAt  DateTime      @default(now())
  customerId Int? // Optional link to Customer
  customer   Customer?     @relation(fields: [customerId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String // URL or path of the image
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}
